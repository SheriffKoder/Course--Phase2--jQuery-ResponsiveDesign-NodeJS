/*

//////(Day8)
Flexbox in responsive design:

check caniuse.com to check on the css support

flex items, they take the least possible size 
according to the content 
width:100% fixes that by dividing areas all evenly


> flex row
> adding gap space using;
    .row gap
    . col + col: margin-left
    . col margin
> setting width to 100% so divide area evenly between columns



//////(Day9)
as long as the image is in a div it will not stretch

removed inner-content 80% width and added padding on the container
it has already margin auto and max-width so will center

make the inner-content a flex-row
add an image div, 

change container2_cols padding from em to vmin to avoid overflow on large em's

flex-wrap works when there are items 4 items each 33% width, the 4th will wrap

i was able to allow mobile response using width of hero-items 75vmin, row-wrap
but it need better control


//////(Day10/11)
align-self, allows the image to stay and retain its natural dimensions

adding width% to flex columns then adjust with justify-content
to create this gap from the leftover width %

when a width of % is set to a flex item, the other item will be like 100% 
and the set % may not display accurate
so its good when leaving a main content to stretch and giving the side content width

using dev tool select elements to know/understand what is giving these not needed margins


//////(Day12)

margin-left: auto;  //will push all the way to the right
//if used on two items will divide the whole space over 4, space item space item

a nav flex row (separating between next flex nav items)
with nav-items flex row each (to give them row)

flex-grow: 1; /* allow the col to grow to the full size remaining in the parent row
useful instead of width: 100% and will ignore its set width, 0 by default
flex-shrink: 1; //the default, this is what keeps flex items getting smaller and not overflow

flex-grow: 0.6 on item with a space-between on parent allows creating a gap


//will use the smallest of these values
//can give three values even and it will pick the smallest
//can change the width on the height vh values
//can put max(,) in the min
//can calc in values without using calc but include space between values
width: min(500px, 70%);


//
width: clamp(min, width, max);
width: clamp(300px, 50%, 20rem);

//using viewport on fonts is not zoom friendly
so use calc(1vw + .5rem); for example
or better
clamp (2rem, 5vw, 5rem);















//challenge01_part2
a good idea is to avoid using descendant selectors
give class names either container__header or accent-text
main-container__nav

reduce html by moving the flex_row class to the inner content div
separate the responsibility across two classes

center text using text-align

//allows all images to be responsive and not overflow their container div
img {
    max-width: 100%;
}


//challenge02_part2
use in the second container
main >
    section/article
    aside



//challenge03_part2
creating a navigation header
header > nav > ul > li's of a and button
the key for aligning here is using nav-button padding/border on li as well as button
however need to remove the right/left padding from the li's and increase flex gap

and removing margin from the ul, as well as the body

.main-header__item a.active {
    //it the item has active class attached to it
}

//the first nav link with a class active gives good style


//challenge04_part2
//on flex-row children helps have gap space on large screens and small gap on mobile
.responsive-width {
    width: 100%;
}

.padding_left {
    padding-left: 3vmax;
}

//on flex-row children helps have gap space on large screens and no gap on mobile
.responsive-width {
    width: 37vmax;
}

//allow flex wrap on portrait mobile and allow flex-gap
.responsive-width {
    width: max(40%, 250px);
}

//80% with mobile 100%
.container-wrapper {
    width: max(80%,300px);
    margin: 0 auto;
    max-width: 1100px;
}








*/



* {
    box-sizing: border-box;
}

body {
    margin: 0;
}


:root {
    --color-border: rgba(255, 192, 203, 0.0);
}

.container {
    padding: 10vmin 5vmin; /**/
}

.inner-content {
    width: 80%; /**/
    margin: 0 auto; /*instead of container l/r padding*/
    max-width: 900px;   /*div float at left with max width for the text */
    background-color: var(--color-border);


}


/*/////////////////////////////////////////////////////////////////////////*/

.row { /* flex container */
    display: flex;
    flex-direction: row;    /*default*/

    justify-content: space-between;


}

.space-between {
    justify-content: space-between;
}

.row_wrap {
    flex-wrap: wrap;
    
    /*adding space(1) */
    gap: 1em;

}

.container2__col {
                /*some styling*/
                background-color: #136C72;
                color: white;
                border-radius: 0.5em;
                box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15);
                
                text-align: center;
                padding: 1.5vmin;
}

.col {
    /* divide spaces evenly for flex items */
    width: 30%;

    /*adding space(2)*/
    /*margin: 0.25em; /*affects outside spacing */

}

/*adding space(3)*/
/* each col has a col after before it*/
.col + .col {
    /*margin-left: 0.5em;*/
}





/*/////////////////////////////////////////////////////////////////////////*/
.hero {
    background-color: #23424A;
    color: white;
    
}


.hero__header {
    margin: 0;

    font-family: system-ui;
    font-style: normal;
    font-weight: 900;

    font-size: 2.5rem;
    line-height: calc(1.164*1em);
    margin-bottom: 1em;
    background-color:var(--color-border);;


}


.hero__text {
    font-family: system-ui;
    font-style: normal;
    font-weight: 400;

    font-size: 1rem;
    line-height: calc(1.5*1em);

    margin-bottom: 2em;
    background-color: var(--color-border);;

}


.hero__button {
    background-color: #38CFD9;
    color: #23424A;

    font-size: 1rem;
    font-weight: 900;
    text-transform: uppercase;

    padding: 1em 3em;

    border-radius: 2em;
    border: 0px;

    display: inline-block;
    
}


.hero__button:hover,
.hero__button:focus {
    opacity: 0.9;
}



.hero__image {
    border: 1px solid  var(--color-border);
    align-self: center;
    width: 30%;

    align-self: flex-start;



}

.hero__items {
    border: 1px solid var(--color-border);
    width: 60%;

}

.hero__image img {
    max-width: 100%;
}


